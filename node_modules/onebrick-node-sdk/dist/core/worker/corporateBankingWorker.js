"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CorporateBankingWorker = void 0;
const axios_1 = __importDefault(require("axios"));
const form_data_1 = __importDefault(require("form-data"));
const constant_1 = require("../util/constant");
class CorporateBankingWorker {
    constructor(configuration, institution) {
        this.configuration = configuration;
        this.institution = institution;
        this.configuration.setCurrentInstitution(this.institution);
    }
    reauthenticateUser(userId, corporateId, token) {
        let userAuthPayload = {
            institutionId: this.institution,
            sessionId: this.configuration.sessionId,
            userId: userId,
            corporateId: corporateId,
            token: token,
        };
        var data = new form_data_1.default();
        data.append("corporateId", corporateId);
        data.append("userId", userId);
        data.append("token", token);
        data.append("sessionId", this.configuration.sessionId);
        data.append("institution_id", this.institution);
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const url = yield ((_a = this === null || this === void 0 ? void 0 : this.configuration) === null || _a === void 0 ? void 0 : _a.getAPIUrl());
            const config = { headers: { "Content-Type": "multipart/form-data" } };
            (0, axios_1.default)({
                method: "post",
                url: `${url}/${constant_1.ENDPOINT.AUTH_BUSSINESS}/${(_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.authRequestData) === null || _c === void 0 ? void 0 : _c.data.clientId}`,
                headers: Object.assign({ "Content-Type": "multipart/form-data", Authorization: `Bearer ${(_d = this.configuration) === null || _d === void 0 ? void 0 : _d.publicAccessToken}` }, data.getHeaders()),
                data: data,
            })
                .then((data) => {
                var _a, _b;
                (_a = this.configuration) === null || _a === void 0 ? void 0 : _a.setRedirectRefId(data.data.data.redirectRefId);
                (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.setSessionId(data.data.data.sessionId);
                resolve(data);
            })
                .catch((err) => {
                console.log(err);
                reject(err);
            });
        }));
    }
    authenticateUser(username, password) {
        let userAuthPayload = {
            institution_id: this.institution,
            username: username,
            password: password,
        };
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const url = yield ((_a = this === null || this === void 0 ? void 0 : this.configuration) === null || _a === void 0 ? void 0 : _a.getAPIUrl());
            axios_1.default
                .post(`${url}/${constant_1.ENDPOINT.AUTH_BUSSINESS}`, JSON.stringify(userAuthPayload), {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${(_b = this.configuration) === null || _b === void 0 ? void 0 : _b.publicAccessToken}`,
                },
            })
                .then((data) => {
                var _a, _b;
                (_a = this.configuration) === null || _a === void 0 ? void 0 : _a.setRedirectRefId(data.data.data.redirectRefId);
                (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.setSessionId(data.data.data.sessionId);
                resolve(data.data);
            })
                .catch((err) => {
                console.log(err);
                reject(err);
            });
        }));
    }
}
exports.CorporateBankingWorker = CorporateBankingWorker;
//# sourceMappingURL=corporateBankingWorker.js.map