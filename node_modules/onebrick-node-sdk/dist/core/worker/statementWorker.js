"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatementWorker = void 0;
const axios_1 = __importDefault(require("axios"));
const constant_1 = require("../util/constant");
const form_data_1 = __importDefault(require("form-data"));
class StatementWorker {
    constructor(configuration, accessToken) {
        this.accessToken = "";
        this.accessToken = accessToken;
        this.configuration = configuration;
    }
    extractStatement(userId, filePath) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            var data = new form_data_1.default();
            data.append("files", filePath);
            data.append("user_id", userId);
            const url = yield ((_a = this.configuration) === null || _a === void 0 ? void 0 : _a.getAPIUrl());
            const headers = Object.assign({ "Content-Type": "multipart/form-data", "X-Channel-Id": "SDK NodeJS V 1.01" }, data.getHeaders());
            (0, axios_1.default)({
                method: "post",
                url: `${url}/${constant_1.ENDPOINT.STATEMENT_DOCUMENT_EXTRACT}/`,
                headers: Object.assign({ "Content-Type": "multipart/form-data", Authorization: `Bearer ${((_b = this.configuration) === null || _b === void 0 ? void 0 : _b.publicAccessToken) || this.accessToken}` }, data.getHeaders()),
                data: data,
            })
                .then((data) => {
                resolve(data.data);
            })
                .catch((err) => {
                reject(err);
            });
        }));
    }
    requestPDFStatement(month, year) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const url = yield ((_a = this.configuration) === null || _a === void 0 ? void 0 : _a.getAPIUrl());
            const headers = {
                "Content-Type": "application/json",
                "X-Channel-Id": "SDK NodeJS V 1.01",
                Authorization: `Bearer ${this.accessToken.replace(/(\r\n|\n|\r)/gm, "")}`,
            };
            axios_1.default
                .get(`${url}/${constant_1.ENDPOINT.STATEMENT_BASE}?month=${month}&year=${year}`, { headers: headers })
                .then((data) => {
                resolve(data.data);
            })
                .catch((err) => {
                reject(err);
            });
        }));
    }
}
exports.StatementWorker = StatementWorker;
//# sourceMappingURL=statementWorker.js.map