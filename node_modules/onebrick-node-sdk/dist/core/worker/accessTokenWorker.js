"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessTokenWorker = void 0;
const axios_1 = __importDefault(require("axios"));
const constant_1 = require("../util/constant");
class AccessTokenWorker {
    constructor(configuration) {
        this.configuration = configuration;
    }
    requestCredentials() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const url = yield ((_a = this.configuration) === null || _a === void 0 ? void 0 : _a.getAPIUrl());
            const payload = {
                accessToken: (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.publicAccessToken,
                redirectUrl: (_c = this.configuration) === null || _c === void 0 ? void 0 : _c.redirectURL,
                userId: (_d = this.configuration) === null || _d === void 0 ? void 0 : _d.name,
            };
            const headers = {
                'X-Channel-Id': 'SDK NodeJS V 1.01'
            };
            axios_1.default
                .post(`${url}/${constant_1.ENDPOINT.REQUEST_ACCESS_TOKEN}`, payload, { headers: headers })
                .then((data) => {
                var _a;
                let authRequestData = data.data;
                (_a = this.configuration) === null || _a === void 0 ? void 0 : _a.setUserAuthenticationRequestData(authRequestData);
                resolve(authRequestData);
            })
                .catch((err) => {
                reject(err);
            });
        }));
    }
    requestAuthentication() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e;
            const url = yield ((_a = this.configuration) === null || _a === void 0 ? void 0 : _a.getAPIUrl());
            axios_1.default
                .get(`${url}/${constant_1.ENDPOINT.REQUEST_ACCESS_TOKEN}`, {
                auth: {
                    username: (_c = (_b = this.configuration) === null || _b === void 0 ? void 0 : _b.clientKey) !== null && _c !== void 0 ? _c : "",
                    password: (_e = (_d = this.configuration) === null || _d === void 0 ? void 0 : _d.clientSecret) !== null && _e !== void 0 ? _e : "",
                },
            })
                .then((data) => {
                var _a;
                let accessToken = data.data;
                (_a = this.configuration) === null || _a === void 0 ? void 0 : _a.setPublicAccessToken(accessToken.data.access_token);
                resolve(accessToken);
            })
                .catch((err) => {
                reject(err);
            });
        }));
    }
}
exports.AccessTokenWorker = AccessTokenWorker;
//# sourceMappingURL=accessTokenWorker.js.map