"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstitutionWorker = void 0;
const axios_1 = __importDefault(require("axios"));
const constant_1 = require("../../core/util/constant");
class InstitutionWorker {
    constructor(institutionPayload) {
        this.institutionPayload = institutionPayload;
    }
    submitInstitution() {
        throw new Error("Method not implemented.");
    }
    listInstitution() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const url = yield ((_b = (_a = this.institutionPayload) === null || _a === void 0 ? void 0 : _a.configuration) === null || _b === void 0 ? void 0 : _b.getAPIUrl());
            axios_1.default
                .get(`${url}/${constant_1.ENDPOINT.INSTITUTION_LIST}/${(_c = this.institutionPayload) === null || _c === void 0 ? void 0 : _c.userId}`, {
                headers: {
                    Authorization: `Bearer ${(_d = this.institutionPayload) === null || _d === void 0 ? void 0 : _d.bearerToken}`,
                },
            })
                .then((data) => {
                let institutionList = data.data;
                resolve(institutionList);
            })
                .catch((err) => {
                reject(err);
            });
        }));
    }
}
exports.InstitutionWorker = InstitutionWorker;
//# sourceMappingURL=institutionWorker.js.map