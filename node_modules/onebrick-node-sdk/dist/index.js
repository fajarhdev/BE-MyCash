"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrickSDK = exports.ENVIRONMENT = void 0;
const transactionWorker_1 = require("./core/worker/transactionWorker");
const statementWorker_1 = require("./core/worker/statementWorker");
const insightWorker_1 = require("./core/worker/insightWorker");
const ecommerceDataWorker_1 = require("./core/worker/ecommerceDataWorker");
const accountWorker_1 = require("./core/worker/accountWorker");
const employmentDataWorker_1 = require("./core/worker/employmentDataWorker");
const configuration_1 = require("./core/util/configuration");
const institutionWorker_1 = require("./core/worker/institutionWorker");
const accessTokenWorker_1 = require("./core/worker/accessTokenWorker");
const bankWorker_1 = require("./core/worker/bankWorker");
const incomeVerification_1 = require("./core/worker/incomeVerification");
const eWalletWorker_1 = require("./core/worker/eWalletWorker");
const ecommerceWorker_1 = require("./core/worker/ecommerceWorker");
const corporateBankingWorker_1 = require("./core/worker/corporateBankingWorker");
var ENVIRONMENT;
(function (ENVIRONMENT) {
    ENVIRONMENT[ENVIRONMENT["SANBOX"] = 0] = "SANBOX";
    ENVIRONMENT[ENVIRONMENT["PRODUCTION"] = 1] = "PRODUCTION";
})(ENVIRONMENT = exports.ENVIRONMENT || (exports.ENVIRONMENT = {}));
class BrickSDK {
    constructor(clientKey, clientSecret, environment, name, redirectURL) {
        this.configuration = new configuration_1.Configuration(clientKey, clientSecret, environment, name, redirectURL);
    }
    authenticateCorporateBanking(institutionId, username, password) {
        return new Promise((resolve, reject) => {
            this.corporateBankingWorker = new corporateBankingWorker_1.CorporateBankingWorker(this.configuration, institutionId);
            this.corporateBankingWorker
                .authenticateUser(username, password)
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    rerequestAuthenticateionCoorporateBanking(institutionId, userId, corporateId, token) {
        return new Promise((resolve, reject) => {
            this.corporateBankingWorker = new corporateBankingWorker_1.CorporateBankingWorker(this.configuration, institutionId);
            this.corporateBankingWorker
                .reauthenticateUser(userId, corporateId, token)
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    reauthenticateWithOTPEwalllet(otp, institutionId) {
        return new Promise((resolve, reject) => {
            if (!otp || !institutionId) {
                reject("parameter cannot be empty or invalid");
            }
            this.ewalletWorker = new eWalletWorker_1.EWalletWorker(this.configuration, institutionId);
            this.ewalletWorker
                .requestReAuthentication(otp)
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    authenticateWithEwallet(phoneNumber, institutionId) {
        return new Promise((resolve, reject) => {
            if (!phoneNumber || !institutionId) {
                reject("parameter cannot be empty or invalid");
            }
            this.ewalletWorker = new eWalletWorker_1.EWalletWorker(this.configuration, institutionId);
            this.ewalletWorker
                .authenticateUser(phoneNumber)
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    reauthenticateWithOTPEwallletAndLink(institutionId, pin, url) {
        return new Promise((resolve, reject) => {
            this.ewalletWorker = new eWalletWorker_1.EWalletWorker(this.configuration, institutionId);
            this.ewalletWorker
                .requestReauthenticationAndLink(pin, url)
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    authenticatteWithMFABank() {
        throw new Error("Method not implemented.");
    }
    requestAuthentication() {
        return new Promise((resolve, reject) => {
            this.accesstokenWorker = new accessTokenWorker_1.AccessTokenWorker(this.configuration);
            this.accesstokenWorker
                .requestCredentials()
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    requestAccessToken() {
        return new Promise((resolve, reject) => {
            this.accesstokenWorker = new accessTokenWorker_1.AccessTokenWorker(this.configuration);
            this.accesstokenWorker
                .requestAuthentication()
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    listInstitution() {
        return new Promise((resolve, reject) => {
            var _a;
            const institutionWorker = {
                configuration: this.configuration,
                bearerToken: this.configuration.publicAccessToken,
                userId: (_a = this.configuration.authRequestData) === null || _a === void 0 ? void 0 : _a.data.clientId,
            };
            this.institutionWorker = new institutionWorker_1.InstitutionWorker(institutionWorker);
            this.institutionWorker
                .listInstitution()
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    authenticateWithEcommerce(username, password, institutionId) {
        return new Promise((resolve, reject) => {
            if (!username || !password || !institutionId) {
                reject("parameter cannot be empty or invalid");
            }
            this.ecommerceWorker = new ecommerceWorker_1.EcommerceWorker(this.configuration, institutionId);
            this.ecommerceWorker
                .authenticateUser(username, password)
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    reAuthenticationWithEcommerce(otp, institutionId) {
        return new Promise((resolve, reject) => {
            this.ecommerceWorker = new ecommerceWorker_1.EcommerceWorker(this.configuration, institutionId);
            this.ecommerceWorker
                .requestReAuthentication(otp)
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    authenticateWithBank(username, password, institutionId) {
        return new Promise((resolve, reject) => {
            if (!username || !password || !institutionId) {
                reject("parameter cannot be empty or invalid");
            }
            this.bankWorker = new bankWorker_1.BankWorker(this.configuration, institutionId);
            this.bankWorker
                .authenticateUser(username, password)
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    authenticateWithIncomeVerification(username, password, institutionId) {
        return new Promise((resolve, reject) => {
            if (!username || !password || !institutionId) {
                reject("parameter cannot be empty or invalid");
            }
            this.incomeVerification = new incomeVerification_1.IncomeVerificationWorker(this.configuration, institutionId);
            this.incomeVerification
                .authenticateUser(username, password)
                .then((data) => {
                return resolve(data);
            })
                .catch((err) => {
                return reject(err);
            });
        });
    }
    /**
     * request after get user_access_token
     */
    requestEmploymentDataPastCompanies(userAccessToken) {
        return new Promise((resolve, reject) => {
            this.employmentDataWorker = new employmentDataWorker_1.EmploymentDataWorker(this.configuration, userAccessToken);
            this.employmentDataWorker
                .requestEmploymentDataPastCompanies()
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestEmploymentDataGeneral(userAccessToken) {
        return new Promise((resolve, reject) => {
            this.employmentDataWorker = new employmentDataWorker_1.EmploymentDataWorker(this.configuration, userAccessToken);
            this.employmentDataWorker
                .requestEmploymentDataGeneral()
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestEmploymentDataEmployent(userAccessToken) {
        return new Promise((resolve, reject) => {
            this.employmentDataWorker = new employmentDataWorker_1.EmploymentDataWorker(this.configuration, userAccessToken);
            this.employmentDataWorker
                .requestEmploymentDataIncomeInformation()
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    /////account 
    requestAccountGeneral(userAccessToken) {
        return new Promise((resolve, reject) => {
            this.accountDataWorker = new accountWorker_1.AccountDataWorker(this.configuration, userAccessToken);
            this.accountDataWorker
                .requestAccountGeneral()
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestAccountGeneralMFA(userAccessToken) {
        return new Promise((resolve, reject) => {
            this.accountDataWorker = new accountWorker_1.AccountDataWorker(this.configuration, userAccessToken);
            this.accountDataWorker
                .requestAccountGeneralMFA()
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestAccountDetGeneral(userAccessToken) {
        return new Promise((resolve, reject) => {
            this.accountDataWorker = new accountWorker_1.AccountDataWorker(this.configuration, userAccessToken);
            this.accountDataWorker
                .requestAccountGeneral()
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    ////account detail
    requestAccountDetailGeneral(userAccessToken, institutionId) {
        return new Promise((resolve, reject) => {
            this.accountDataWorker = new accountWorker_1.AccountDataWorker(this.configuration, userAccessToken);
            this.accountDataWorker
                .requestAccountDetailGeneral(institutionId)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestAccountDetailGeneralMFA(userAccessToken) {
        return new Promise((resolve, reject) => {
            this.accountDataWorker = new accountWorker_1.AccountDataWorker(this.configuration, userAccessToken);
            this.accountDataWorker
                .requestAccountGeneralMFA()
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    /////ecommerce
    requestEcommerceBuyerIdentity(userAccessToken) {
        return new Promise((resolve, reject) => {
            this.ecommerceDataWorker = new ecommerceDataWorker_1.EcommerceDataWorker(this.configuration, userAccessToken);
            this.ecommerceDataWorker
                .requestEcommerceBuyerIdentity()
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestEcommerceBuyerTransaction(userAccessToken, numberOfTransaction) {
        return new Promise((resolve, reject) => {
            this.ecommerceDataWorker = new ecommerceDataWorker_1.EcommerceDataWorker(this.configuration, userAccessToken);
            this.ecommerceDataWorker
                .requestEcommerceBuyerTransaction(numberOfTransaction)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestEcommerceMerchantIdentity(userAccessToken) {
        return new Promise((resolve, reject) => {
            this.ecommerceDataWorker = new ecommerceDataWorker_1.EcommerceDataWorker(this.configuration, userAccessToken);
            this.ecommerceDataWorker
                .requestEcommerceMerchantIdentity()
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestEcommerceMerchantIncome(userAccessToken, from, to) {
        return new Promise((resolve, reject) => {
            this.ecommerceDataWorker = new ecommerceDataWorker_1.EcommerceDataWorker(this.configuration, userAccessToken);
            this.ecommerceDataWorker
                .requestEcommerceMerchantIncome(from, to)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestEcommerceMerchantTransaction(userAccessToken, numberOfTransaction) {
        return new Promise((resolve, reject) => {
            this.ecommerceDataWorker = new ecommerceDataWorker_1.EcommerceDataWorker(this.configuration, userAccessToken);
            this.ecommerceDataWorker
                .requestEcommerceMerchantTransaction(numberOfTransaction)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    /////request insight transaction
    requestInsightWorkerAvgBalance(userAccessToken, from, to) {
        return new Promise((resolve, reject) => {
            this.insightWorker = new insightWorker_1.InsightWorker(this.configuration, userAccessToken);
            this.insightWorker
                .requestAvarageBalance(from, to)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestInsightWorkerBalanceSummary(userAccessToken, from, to) {
        return new Promise((resolve, reject) => {
            this.insightWorker = new insightWorker_1.InsightWorker(this.configuration, userAccessToken);
            this.insightWorker
                .requestTransactionBalanceSummary(from, to)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestCategorization(userAccessToken, categorization) {
        return new Promise((resolve, reject) => {
            this.insightWorker = new insightWorker_1.InsightWorker(this.configuration, userAccessToken);
            this.insightWorker
                .requestCategorization(categorization)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestStatement(userAccessToken, month, year) {
        return new Promise((resolve, reject) => {
            this.statementWorker = new statementWorker_1.StatementWorker(this.configuration, userAccessToken);
            this.statementWorker
                .requestPDFStatement(month, year)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    uploadDocumentStatement(userAccessToken, filePath, userId) {
        return new Promise((resolve, reject) => {
            this.statementWorker = new statementWorker_1.StatementWorker(this.configuration, userAccessToken);
            this.statementWorker
                .extractStatement(filePath, userId)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    ///// transaction list
    requestTransactionListGeneral(userAccessToken, from, to) {
        return new Promise((resolve, reject) => {
            this.transactionWorker = new transactionWorker_1.TransactionWorker(this.configuration, userAccessToken);
            this.transactionWorker
                .requestTransactionGeneral(from, to)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
    requestTransactionListMFA(userAccessToken, from, to) {
        return new Promise((resolve, reject) => {
            this.transactionWorker = new transactionWorker_1.TransactionWorker(this.configuration, userAccessToken);
            this.transactionWorker
                .requestTransactionGeneralMFA(from, to)
                .then((data) => {
                resolve(data);
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
}
exports.BrickSDK = BrickSDK;
//# sourceMappingURL=index.js.map