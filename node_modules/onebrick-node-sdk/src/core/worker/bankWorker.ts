import axios from "axios";
import { ENDPOINT } from "../util/constant";
import { AuthenticationRequestBankTypePayload } from "../models/authentication";
import { Configuration } from "../util/configuration";
import { ILooseObject } from "../util/looseObject";
interface IBankWorker {
  authenticateUser(username: string, password: string): Promise<any>;
}
export class BankWorker implements IBankWorker {
  configuration: Configuration;
  institution?: number;

  constructor(configuration: Configuration, institution: number) {
    this.configuration = configuration;
    this.institution = institution;
    this.configuration.setCurrentInstitution(this.institution);
  }

  authenticateUser(username: string, password: string): Promise<any> {
    let userAuthPayload: AuthenticationRequestBankTypePayload = {
      institutionId: this.institution as number,
      username: username as string,
      password: password,
      redirectRefId: this.configuration.authRequestData?.data
        .redirectRefId as number,
    };

    return new Promise<any>(async (resolve, reject) => {
      const url = await this?.configuration?.getAPIUrl();
      axios
        .post(
          `${url}/${ENDPOINT.AUTH_USER}/${this.configuration.authRequestData?.data.clientId}`,
          JSON.stringify(userAuthPayload),
          {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${this.configuration?.publicAccessToken}`,
            },
          }
        )
        .then((data: any) => {
          console.log(JSON.stringify(data.data));
          resolve(data.data);
        })
        .catch((err: ILooseObject) => {
          reject(err);
        });
    });
  }
}
