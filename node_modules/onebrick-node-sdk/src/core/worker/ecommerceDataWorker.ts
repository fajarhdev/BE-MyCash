import axios from "axios";
import { ENDPOINT } from "../util/constant";
import { Configuration } from "../util/configuration";
export class EcommerceDataWorker {
  accessToken: String = "";
  configuration: Configuration;
  constructor(configuration:Configuration,accessToken: string) {
    this.accessToken = accessToken;
    this.configuration = configuration;
  }

  requestEcommerceBuyerIdentity(): Promise<any> {
    return new Promise<any>(async (resolve, reject) => {
        const url = await this.configuration?.getAPIUrl();
        const headers = {
          "Content-Type": "application/json",
          "X-Channel-Id": "SDK NodeJS V 1.01",
          Authorization: `Bearer ${this.accessToken}`,
        };
        axios
          .get(`${url}/${ENDPOINT.ECOMMERCE_BUYER_IDENTITY}`, { headers: headers })
          .then((data: any) => {
            resolve(data.data);
          })
          .catch((err: Error) => {
            reject(err);
          });
      });
  }
  requestEcommerceBuyerTransaction(numberOfTransaction:number): Promise<any> {
    return new Promise<any>(async (resolve, reject) => {
        const url = await this.configuration?.getAPIUrl();
        const headers = {
          "Content-Type": "application/json",
          "X-Channel-Id": "SDK NodeJS V 1.01",
          Authorization: `Bearer ${this.accessToken}`,
        };
        axios
          .get(`${url}/${ENDPOINT.ECOMMERCE_BUYER_TRANSACTION}?transaction=${numberOfTransaction}`, { headers: headers })
          .then((data: any) => {
            resolve(data.data);
          })
          .catch((err: Error) => {
            reject(err);
          });
      });
  }
  requestEcommerceMerchantIdentity(): Promise<any> {
    return new Promise<any>(async (resolve, reject) => {
        const url = await this.configuration?.getAPIUrl();
        const headers = {
          "Content-Type": "application/json",
          "X-Channel-Id": "SDK NodeJS V 1.01",
          Authorization: `Bearer ${this.accessToken}`,
        };
        axios
          .get(`${url}/${ENDPOINT.ECOMMERCE_MERCHANT_IDENTITY}`, { headers: headers })
          .then((data: any) => {
            resolve(data.data);
          })
          .catch((err: Error) => {
            reject(err);
          });
      });
  }
  requestEcommerceMerchantIncome(from:string,to:string): Promise<any> {
    return new Promise<any>(async (resolve, reject) => {
        const url = await this.configuration?.getAPIUrl();
        const headers = {
          "Content-Type": "application/json",
          "X-Channel-Id": "SDK NodeJS V 1.01",
          Authorization: `Bearer ${this.accessToken}`,
        };
        axios
          .get(`${url}/${ENDPOINT.ECOMMERCE_MERCHANT_INCOME}?from=${from}&to=${to}`, { headers: headers })
          .then((data: any) => {
            resolve(data.data);
          })
          .catch((err: Error) => {
            reject(err);
          });
      });
  }
  requestEcommerceMerchantTransaction(numberOfTransaction:number): Promise<any> {
    return new Promise<any>(async (resolve, reject) => {
        const url = await this.configuration?.getAPIUrl();
        const headers = {
          "Content-Type": "application/json",
          "X-Channel-Id": "SDK NodeJS V 1.01",
          Authorization: `Bearer ${this.accessToken}`,
        };
        axios
          .get(`${url}/${ENDPOINT.ECOMMERCE_BUYER_MERCHANT_TRANSACTION}?transaction=${numberOfTransaction}`, { headers: headers })
          .then((data: any) => {
            resolve(data.data);
          })
          .catch((err: Error) => {
            reject(err);
          });
      });
  }
}
