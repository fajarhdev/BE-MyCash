import axios from "axios";
import { ENDPOINT } from "../util/constant";
import { Configuration } from "../util/configuration";
import {
  AuthenticationRequest,
  AuthenticationRequestPayload,
  AuthenticationRequestResponse,
} from "../../core/models/authentication";
export class AccessTokenWorker {
  configuration?: Configuration;
  constructor(configuration: Configuration) {
    this.configuration = configuration;
  }

  requestCredentials(): Promise<any> {
    return new Promise<any>(async (resolve, reject) => {
      const url = await this.configuration?.getAPIUrl();
      const payload: AuthenticationRequestPayload = {
        accessToken: this.configuration?.publicAccessToken as string,
        redirectUrl: this.configuration?.redirectURL as string,
        userId: this.configuration?.name as string,
      };
      const headers = {
        'X-Channel-Id': 'SDK NodeJS V 1.01'
      }
      axios
        .post(`${url}/${ENDPOINT.REQUEST_ACCESS_TOKEN}`, payload,{headers:headers})
        .then((data: any) => {
          let authRequestData = data.data as AuthenticationRequestResponse;
          this.configuration?.setUserAuthenticationRequestData(authRequestData);
          resolve(authRequestData);
        })
        .catch((err: Error) => {
          reject(err);
        });
    });
  }

  requestAuthentication(): Promise<AuthenticationRequest> {
    return new Promise<any>(async (resolve, reject) => {
      const url = await this.configuration?.getAPIUrl();
      axios
        .get(`${url}/${ENDPOINT.REQUEST_ACCESS_TOKEN}`, {
          auth: {
            username: this.configuration?.clientKey ?? "",
            password: this.configuration?.clientSecret ?? "",
          },
        })
        .then((data: any) => {
          let accessToken = data.data as AuthenticationRequest;
          this.configuration?.setPublicAccessToken(
            accessToken.data.access_token
          );
          resolve(accessToken);
        })
        .catch((err: Error) => {
          reject(err);
        });
    });
  }
}
