import axios from "axios";
import { v4 as uuidv4 } from "uuid";
import { ENDPOINT, RESPONSE_ERROR } from "../util/constant";
import {
  AuthenticationRequestEwalletType2Payload,
  AuthenticationRequestEwalletTypePayload,
} from "../models/authentication";
import { Configuration } from "../util/configuration";
import { ILooseObject } from "../util/looseObject";

interface IEWalletWorker {}
export class EWalletWorker implements IEWalletWorker {
  configuration?: Configuration;
  institution?: number;

  constructor(configuration: Configuration, institution: number) {
    this.configuration = configuration;
    this.institution = institution;
    this.configuration.setCurrentInstitution(this.institution);
  }
  requestReauthenticationAndLink(pin: string, urlOvo: string): Promise<any> {
    let userAuthPayload: AuthenticationRequestEwalletType2Payload = {
      deviceId: this.configuration?.deviceId,
      refId: this.configuration?.refId,
      pin: Number(pin),
      otpNumber: urlOvo,
      redirectRefId: this.configuration?.authRequestData?.data
        .redirectRefId as number,
      username: this.configuration?.username,
    };
    let instName = "ovo";
    if (this.institution?.toString() === "11") {
      instName = "gopay";
    }
    console.log(userAuthPayload);
    console.log(instName);

    return new Promise<any>(async (resolve, reject) => {
      const url = await this?.configuration?.getAPIUrl();
      console.log(
        `${url}/${ENDPOINT.AUTH_USER}/${instName}/${this.configuration?.authRequestData?.data.clientId}?redirectRefId=${userAuthPayload.redirectRefId}&uuid=true`
      );
      axios
        .post(
          `${url}/${ENDPOINT.AUTH_USER}/${instName}/${this.configuration?.authRequestData?.data.clientId}?redirectRefId=${userAuthPayload.redirectRefId}&uuid=true`,
          JSON.stringify(userAuthPayload),
          {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${this.configuration?.publicAccessToken}`,
            },
          }
        )
        .then((data: any) => {
          resolve(data.data);
        })
        .catch((err: ILooseObject) => {
          reject(err);
        });
    });
  }
  requestReAuthentication(otp: string): Promise<any> {
    let userAuthPayload: AuthenticationRequestEwalletTypePayload = {
      institutionId: this.institution as number,
      username: this.configuration?.username as string,
      otp: otp as string,
      sessionId: this.configuration?.sessionId,
      uniqueId: this.configuration?.uniqueId,
      otpToken: this.configuration?.otpToken,
      redirectRefId: this.configuration?.authRequestData?.data
        .redirectRefId as number,
    };
    console.log(userAuthPayload);

    let instName = "ovo";
    if (this.institution?.toString() === "11") {
      instName = "gopay";
    }
    return new Promise<any>(async (resolve, reject) => {
      const url = await this?.configuration?.getAPIUrl();
      axios
        .post(
          `${url}/${ENDPOINT.AUTH_USER}/${instName}/${this.configuration?.authRequestData?.data.clientId}?redirectRefId=${userAuthPayload.redirectRefId}`,
          JSON.stringify(userAuthPayload),
          {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${this.configuration?.publicAccessToken}`,
            },
          }
        )
        .then((data: any) => {
        
          resolve(data.data);
        })
        .catch((err: ILooseObject) => {
          console.log(err);
          reject(err);
        });
    });
  }
  authenticateUser(phoneNumber: string): Promise<any> {
    let userAuthPayload: AuthenticationRequestEwalletTypePayload = {
      institutionId: this.institution as number,
      username: phoneNumber as string,
      redirectRefId: this.configuration?.authRequestData?.data
        .redirectRefId as number,
    };

    return new Promise<any>(async (resolve, reject) => {
      const url = await this?.configuration?.getAPIUrl();
      axios
        .post(
          `${url}/${ENDPOINT.AUTH_USER}/${this.configuration?.authRequestData?.data.clientId}`,
          JSON.stringify(userAuthPayload),
          {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${this.configuration?.publicAccessToken}`,
            },
          }
        )
        .then((data: any) => {
          console.log('data 1-->',data);
          this.configuration?.setRefId(
            data.data.data.refId ? data.data.data.refId : ""
          );
          this.configuration?.setDeviceId(
            data.data.data.deviceId ? data.data.data.deviceId : ""
          );
          this.configuration?.setOTPToken(data.data.data.otpToken);
          this.configuration?.setUniqueId(data.data.data.uniqueId);
          this.configuration?.setSessionId(data.data.data.sessionId);
          this.configuration?.setCurrentUserName(data.data.data.username);
          resolve(data.data);
        })
        .catch((err: ILooseObject) => {
          reject(err);
        });
    });
  }
}
