import axios from "axios";
import formdata from "form-data";
import { ENDPOINT } from "../util/constant";
import { AuthenticationRequestBankTypePayload } from "../models/authentication";
import { Configuration } from "../util/configuration";
export class CorporateBankingWorker {
  configuration: Configuration;
  institution?: number;

  constructor(configuration: Configuration, institution: number) {
    this.configuration = configuration;
    this.institution = institution;
    this.configuration.setCurrentInstitution(this.institution);
  }
  reauthenticateUser(
    userId: string,
    corporateId: string,
    token: string
  ): Promise<any> {
    let userAuthPayload: AuthenticationRequestBankTypePayload = {
      institutionId: this.institution as number,
      sessionId: this.configuration.sessionId as string,
      userId: userId as string,
      corporateId: corporateId,
      token: token,
    };
    var data = new formdata();
    data.append("corporateId", corporateId);
    data.append("userId", userId);
    data.append("token", token);
    data.append("sessionId", this.configuration.sessionId as string);
    data.append("institution_id", this.institution as unknown as string);

    return new Promise<any>(async (resolve, reject) => {
      const url = await this?.configuration?.getAPIUrl();
      const config = { headers: { "Content-Type": "multipart/form-data" } };
      axios({
        method: "post",
        url: `${url}/${ENDPOINT.AUTH_BUSSINESS}/${this.configuration?.authRequestData?.data.clientId}`,

        headers: {
          "Content-Type": "multipart/form-data",
          Authorization: `Bearer ${this.configuration?.publicAccessToken}`,
          ...data.getHeaders(),
        },
        data: data,
      })
        .then((data: any) => {
          this.configuration?.setRedirectRefId(data.data.data.redirectRefId);
          this.configuration?.setSessionId(data.data.data.sessionId);
          resolve(data);
        })
        .catch((err: Error) => {
          console.log(err);
          reject(err);
        });
    });
  }
  authenticateUser(username: string, password: string): Promise<any> {
    let userAuthPayload: AuthenticationRequestBankTypePayload = {
      institution_id: this.institution as number,
      username: username as string,
      password: password,
    };

    return new Promise<any>(async (resolve, reject) => {
      const url = await this?.configuration?.getAPIUrl();
      axios
        .post(
          `${url}/${ENDPOINT.AUTH_BUSSINESS}`,
          JSON.stringify(userAuthPayload),
          {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${this.configuration?.publicAccessToken}`,
            },
          }
        )
        .then((data: any) => {
          this.configuration?.setRedirectRefId(data.data.data.redirectRefId);
          this.configuration?.setSessionId(data.data.data.sessionId);
          resolve(data.data);
        })
        .catch((err: Error) => {
          console.log(err);
          reject(err);
        });
    });
  }
}
