import axios from "axios";
import { ENDPOINT } from "../util/constant";
import formdata from "form-data";
import { Configuration } from "../util/configuration";
export class StatementWorker {
  accessToken: String = "";
  configuration: Configuration;
  constructor(configuration: Configuration, accessToken: string) {
    this.accessToken = accessToken;
    this.configuration = configuration;
  }
  extractStatement(userId:string,filePath:string):Promise<any> {
    return new Promise<any>(async (resolve, reject) => {
        var data = new formdata();
        data.append("files", filePath);
        data.append("user_id", userId);
        const url = await this.configuration?.getAPIUrl();
        const headers = {
        "Content-Type": "multipart/form-data",
          "X-Channel-Id": "SDK NodeJS V 1.01",
         ...data.getHeaders()
        };
        axios({
            method: "post",
            url: `${url}/${ENDPOINT.STATEMENT_DOCUMENT_EXTRACT}/`,
    
            headers: {
              "Content-Type": "multipart/form-data",
              Authorization: `Bearer ${this.configuration?.publicAccessToken || this.accessToken}`,
              ...data.getHeaders(),
            },
            data: data,
          })
        .then((data: any) => {
          resolve(data.data);
        })
        .catch((err: Error) => {
          reject(err);
        });
    })
  }
  requestPDFStatement(month:string,year:string): Promise<any> {
    return new Promise<any>(async (resolve, reject) => {
      const url = await this.configuration?.getAPIUrl();
      const headers = {
        "Content-Type": "application/json",
        "X-Channel-Id": "SDK NodeJS V 1.01",
        Authorization: `Bearer ${this.accessToken.replace(/(\r\n|\n|\r)/gm, "")}`,
      };
      axios
        .get(
          `${url}/${ENDPOINT.STATEMENT_BASE}?month=${month}&year=${year}`,
          { headers: headers }
        )
        .then((data: any) => {
          resolve(data.data);
        })
        .catch((err: Error) => {
          reject(err);
        });
    });
  }
}
