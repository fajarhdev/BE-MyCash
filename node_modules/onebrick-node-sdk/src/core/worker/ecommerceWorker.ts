import axios from "axios";
import { ENDPOINT } from "../util/constant";
import {
  AuthenticationRequestBankTypePayload,
  AuthenticationRequestEcommerceTypePayload,
} from "../models/authentication";
import { Configuration } from "../util/configuration";
import { ILooseObject } from "../util/looseObject";

interface IEcommerceWorker {
  requestReAuthentication(tokenString: string): Promise<any>;
  authenticateUser(username: string, password: string): Promise<any>;
}

export class EcommerceWorker implements IEcommerceWorker {
  configuration: Configuration;
  institution?: number;

  constructor(configuration: Configuration, institution: number) {
    this.configuration = configuration;
    this.institution = institution;
    this.configuration.setCurrentInstitution(this.institution);
  }

  requestReAuthentication(token?: string): Promise<any> {
    let userAuthPayload: AuthenticationRequestEcommerceTypePayload = {
      institutionId: this.institution as number,
      requestId: this.configuration.requestId as string,
      username: this.configuration?.username as string,
      token: token ? token : ("" as string),
      password: this.configuration?.password as string,
      sessionId: this.configuration?.sessionId,
    };
    console.log(userAuthPayload);

    let instName = "";
    let headers:ILooseObject = {};
    if (this.institution == 20) {
      instName = "tokopedia";
      headers = {
        "Content-Type": "application/json",
        Cookie:this.configuration.cookies,
        Authorization: `Bearer ${this.configuration?.publicAccessToken}`,
      }
    } else {
      instName = "shopee";
      headers = {
        "Content-Type": "application/json",
        Authorization: `Bearer ${this.configuration?.publicAccessToken}`,
      }
    }
    return new Promise<any>(async (resolve, reject) => {
      const url = await this?.configuration?.getAPIUrl();
      axios
        .post(
          `${url}/${ENDPOINT.AUTH_USER}/${instName}/${this.configuration?.authRequestData?.data.clientId}?uuid=true&redirectRefId=${this.configuration.authRequestData?.data.redirectRefId}`,
          JSON.stringify(userAuthPayload),
          {
            headers:headers,
          }
        )
        .then((data: any) => {
          resolve(data.data);
        })
        .catch((err: ILooseObject) => {
          reject(err);
        });
    });
  }
  authenticateUser(username: string, password: string): Promise<any> {
    let userAuthPayload: AuthenticationRequestBankTypePayload = {
      institutionId: this.institution as number,
      username: username as string,
      password: password,
      redirectRefId: this.configuration.authRequestData?.data
        .redirectRefId as number,
    };

    return new Promise<any>(async (resolve, reject) => {
      const url = await this?.configuration?.getAPIUrl();
      axios
        .post(
          `${url}/${ENDPOINT.AUTH_USER}/${this.configuration.authRequestData?.data.clientId}`,
          JSON.stringify(userAuthPayload),
          {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${this.configuration?.publicAccessToken}`,
            },
          }
        )
        .then((data: any) => {
          this.configuration.cookies = data.headers['set-cookie'];
          //this.configuration.cookies = data.
          this.configuration?.sertRequestId(
            this.configuration.authRequestData?.data
              .clientId as unknown as string
          );
          this.configuration?.setpassword(password);
          this.configuration?.setSessionId(data.data.data.sessionId);
          this.configuration?.setCurrentUserName(username);
          resolve(data.data);
        })
        .catch((err: ILooseObject) => {
          reject(err);
        });
    });
  }
}
